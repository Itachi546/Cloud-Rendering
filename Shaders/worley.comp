#version 460

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

uniform vec4 uAmp_Freq_Lac_Per;
uniform vec4 uOffsetAndChannel;
uniform int uNumOctaves;
uniform vec3 uImageSize;

layout(binding = 0, rgba32f) uniform image3D uInputTexture;

// Hash by David_Hoskins
#define UI0 1597334673U
#define UI1 3812015801U
#define UI2 uvec2(UI0, UI1)
#define UI3 uvec3(UI0, UI1, 2798796415U)
#define UIF (1.0 / float(0xffffffffU))

vec3 hash33(vec3 p)
{
	uvec3 q = uvec3(ivec3(p)) * UI3;
	q = (q.x ^ q.y ^ q.z)*UI3;
	return -1. + 2. * vec3(q) * UIF;
}

// Tileable 3D worley noise
float worley(vec3 uv, float freq)
{    
    vec3 id = floor(uv);
    vec3 p = fract(uv);
    
    float minDist = 10000.;
    for (float x = -1.; x <= 1.; ++x)
    {
        for(float y = -1.; y <= 1.; ++y)
        {
            for(float z = -1.; z <= 1.; ++z)
            {
                vec3 offset = vec3(x, y, z);
            	vec3 h = hash33(mod(id + offset, vec3(freq))) * .5 + .5;
    			h += offset;
            	vec3 d = p - h;
           		minDist = min(minDist, dot(d, d));
            }
        }
    }
    
    // inverted worley noise
    return 1. - minDist;
}



void main() {
   ivec3 uv = ivec3(gl_GlobalInvocationID.xyz);
   if(uv.x >= uImageSize.x || uv.y >= uImageSize.y || uv.z >= uImageSize.z) return;

   float amplitude = uAmp_Freq_Lac_Per.x;
   float frequency = uAmp_Freq_Lac_Per.y * 4.0f;
   float noise = 0.0f;

   vec3 p = vec3(uv) / uImageSize + uOffsetAndChannel.xyz;
   for(int i = 0; i < uNumOctaves; ++i) {
      noise += amplitude * worley(p * frequency, frequency);
      frequency *= uAmp_Freq_Lac_Per.z;
      amplitude *= uAmp_Freq_Lac_Per.w;
   }

   vec4 color = imageLoad(uInputTexture, uv);
   color[int(uOffsetAndChannel.w)] = noise;
   imageStore(uInputTexture, uv, color);
}